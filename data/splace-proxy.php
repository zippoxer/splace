<?php

// Splace PHP Proxy
// Compatibility: PHP >= 5.3

// Dependency ifsnop/mysqldump-php (minified)
class Mysqldump{const MAXLINESIZE=1000000;const GZIP='Gzip';const BZIP2='Bzip2';const NONE='None';const UTF8='utf8';const UTF8MB4='utf8mb4'; public $user; public $pass; public $dsn; public $fileName='php://output'; private $tables=array(); private $views=array(); private $triggers=array(); private $procedures=array(); private $events=array(); private $dbHandler=null; private $dbType=""; private $compressManager; private $typeAdapter; private $dumpSettings=array(); private $pdoSettings=array(); private $version; private $tableColumnTypes=array(); private $transformColumnValueCallable; private $dbName; private $host; private $dsnArray=array(); public function __construct($dsn='',$user='',$pass='',$dumpSettings=array(),$pdoSettings=array()){$dumpSettingsDefault=array('include-tables'=>array(),'exclude-tables'=>array(),'compress'=>Mysqldump::NONE,'init_commands'=>array(),'no-data'=>array(),'reset-auto-increment'=>false,'add-drop-database'=>false,'add-drop-table'=>false,'add-drop-trigger'=>true,'add-locks'=>true,'complete-insert'=>false,'databases'=>false,'default-character-set'=>Mysqldump::UTF8,'disable-keys'=>true,'extended-insert'=>true,'events'=>false,'hex-blob'=>true,'insert-ignore'=>false,'net_buffer_length'=>self::MAXLINESIZE,'no-autocommit'=>true,'no-create-info'=>false,'lock-tables'=>true,'routines'=>false,'single-transaction'=>true,'skip-triggers'=>false,'skip-tz-utc'=>false,'skip-comments'=>false,'skip-dump-date'=>false,'skip-definer'=>false,'where'=>'','disable-foreign-keys-check'=>true);$pdoSettingsDefault=array(PDO::ATTR_PERSISTENT=>true,PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION,);$this->user=$user;$this->pass=$pass;$this->parseDsn($dsn);if("mysql"===$this->dbType){$pdoSettingsDefault[PDO::MYSQL_ATTR_USE_BUFFERED_QUERY]=false;}$this->pdoSettings=self::array_replace_recursive($pdoSettingsDefault,$pdoSettings);$this->dumpSettings=self::array_replace_recursive($dumpSettingsDefault,$dumpSettings);$this->dumpSettings['init_commands'][]="SET NAMES ".$this->dumpSettings['default-character-set'];if(false===$this->dumpSettings['skip-tz-utc']){$this->dumpSettings['init_commands'][]="SET TIME_ZONE='+00:00'";}$diff=array_diff(array_keys($this->dumpSettings),array_keys($dumpSettingsDefault));if(count($diff)>0){ throw new Exception("Unexpected value in dumpSettings: (".implode(",",$diff).")");}if(!is_array($this->dumpSettings['include-tables'])||!is_array($this->dumpSettings['exclude-tables'])){ throw new Exception("Include-tables and exclude-tables should be arrays");}$this->dumpSettings['include-views']=$this->dumpSettings['include-tables'];$this->compressManager=CompressManagerFactory::create($this->dumpSettings['compress']);} public function __destruct(){$this->dbHandler=null;} public static function array_replace_recursive($array1,$array2){if(function_exists('array_replace_recursive')){return array_replace_recursive($array1,$array2);}foreach($array2 as $key=>$value){if(is_array($value)){$array1[$key]=self::array_replace_recursive($array1[$key],$value);}else {$array1[$key]=$value;}}return $array1;} private function parseDsn($dsn){if(empty($dsn)||(false===($pos=strpos($dsn,":")))){ throw new Exception("Empty DSN string");}$this->dsn=$dsn;$this->dbType=strtolower(substr($dsn,0,$pos));if(empty($this->dbType)){ throw new Exception("Missing database type from DSN string");}$dsn=substr($dsn,$pos+1);foreach(explode(";",$dsn) as $kvp){$kvpArr=explode("=",$kvp);$this->dsnArray[strtolower($kvpArr[0])]=$kvpArr[1];}if(empty($this->dsnArray['host'])&&empty($this->dsnArray['unix_socket'])){ throw new Exception("Missing host from DSN string");}$this->host=(!empty($this->dsnArray['host']))?$this->dsnArray['host']:$this->dsnArray['unix_socket'];if(empty($this->dsnArray['dbname'])){ throw new Exception("Missing database name from DSN string");}$this->dbName=$this->dsnArray['dbname'];return true;} private function connect(){try{switch($this->dbType){case 'sqlite':$this->dbHandler=@new PDO("sqlite:".$this->dbName,null,null,$this->pdoSettings);break;case 'mysql':case 'pgsql':case 'dblib':$this->dbHandler=@new PDO($this->dsn,$this->user,$this->pass,$this->pdoSettings);foreach($this->dumpSettings['init_commands'] as $stmt){$this->dbHandler->exec($stmt);}$this->version=$this->dbHandler->getAttribute(PDO::ATTR_SERVER_VERSION);break;default: throw new Exception("Unsupported database type (".$this->dbType.")");}}catch(PDOException$e){ throw new Exception("Connection to ".$this->dbType." failed with message: ".$e->getMessage());}if(is_null($this->dbHandler)){ throw new Exception("Connection to ".$this->dbType."failed");}$this->dbHandler->setAttribute(PDO::ATTR_ORACLE_NULLS,PDO::NULL_NATURAL);$this->typeAdapter=TypeAdapterFactory::create($this->dbType,$this->dbHandler,$this->dumpSettings);} public function start($filename=''){if(!empty($filename)){$this->fileName=$filename;}$this->connect();$this->compressManager->open($this->fileName);$this->compressManager->write($this->getDumpFileHeader());$this->compressManager->write($this->typeAdapter->backup_parameters());if($this->dumpSettings['databases']){$this->compressManager->write($this->typeAdapter->getDatabaseHeader($this->dbName));if($this->dumpSettings['add-drop-database']){$this->compressManager->write($this->typeAdapter->add_drop_database($this->dbName));}}$this->getDatabaseStructureTables();$this->getDatabaseStructureViews();$this->getDatabaseStructureTriggers();$this->getDatabaseStructureProcedures();$this->getDatabaseStructureEvents();if($this->dumpSettings['databases']){$this->compressManager->write($this->typeAdapter->databases($this->dbName));}if(0<count($this->dumpSettings['include-tables'])){$name=implode(",",$this->dumpSettings['include-tables']); throw new Exception("Table (".$name.") not found in database");}$this->exportTables();$this->exportTriggers();$this->exportViews();$this->exportProcedures();$this->exportEvents();$this->compressManager->write($this->typeAdapter->restore_parameters());$this->compressManager->write($this->getDumpFileFooter());$this->compressManager->close();} private function getDumpFileHeader(){$header='';if(!$this->dumpSettings['skip-comments']){$header="-- mysqldump-php https://github.com/ifsnop/mysqldump-php".PHP_EOL."--".PHP_EOL."-- Host: {$this->host}\tDatabase: {$this->dbName}".PHP_EOL."-- ------------------------------------------------------".PHP_EOL;if(!empty($this->version)){$header.="-- Server version \t".$this->version.PHP_EOL;}if(!$this->dumpSettings['skip-dump-date']){$header.="-- Date: ".date('r').PHP_EOL.PHP_EOL;}}return $header;} private function getDumpFileFooter(){$footer='';if(!$this->dumpSettings['skip-comments']){$footer.='-- Dump completed';if(!$this->dumpSettings['skip-dump-date']){$footer.=' on: '.date('r');}$footer.=PHP_EOL;}return $footer;} private function getDatabaseStructureTables(){if(empty($this->dumpSettings['include-tables'])){foreach($this->dbHandler->query($this->typeAdapter->show_tables($this->dbName)) as $row){array_push($this->tables,current($row));}}else {foreach($this->dbHandler->query($this->typeAdapter->show_tables($this->dbName)) as $row){if(in_array(current($row),$this->dumpSettings['include-tables'],true)){array_push($this->tables,current($row));$elem=array_search(current($row),$this->dumpSettings['include-tables']);unset($this->dumpSettings['include-tables'][$elem]);}}}return;} private function getDatabaseStructureViews(){if(empty($this->dumpSettings['include-views'])){foreach($this->dbHandler->query($this->typeAdapter->show_views($this->dbName)) as $row){array_push($this->views,current($row));}}else {foreach($this->dbHandler->query($this->typeAdapter->show_views($this->dbName)) as $row){if(in_array(current($row),$this->dumpSettings['include-views'],true)){array_push($this->views,current($row));$elem=array_search(current($row),$this->dumpSettings['include-views']);unset($this->dumpSettings['include-views'][$elem]);}}}return;} private function getDatabaseStructureTriggers(){if(false===$this->dumpSettings['skip-triggers']){foreach($this->dbHandler->query($this->typeAdapter->show_triggers($this->dbName)) as $row){array_push($this->triggers,$row['Trigger']);}}return;} private function getDatabaseStructureProcedures(){if($this->dumpSettings['routines']){foreach($this->dbHandler->query($this->typeAdapter->show_procedures($this->dbName)) as $row){array_push($this->procedures,$row['procedure_name']);}}return;} private function getDatabaseStructureEvents(){if($this->dumpSettings['events']){foreach($this->dbHandler->query($this->typeAdapter->show_events($this->dbName)) as $row){array_push($this->events,$row['event_name']);}}return;} private function matches($table,$arr){$match=false;foreach($arr as $pattern){if('/'!=$pattern[0]){continue;}if(1==preg_match($pattern,$table)){$match=true;}}return in_array($table,$arr)||$match;} private function exportTables(){foreach($this->tables as $table){if($this->matches($table,$this->dumpSettings['exclude-tables'])){continue;}$this->getTableStructure($table);if(false===$this->dumpSettings['no-data']){$this->listValues($table);}elseif(true===$this->dumpSettings['no-data']||$this->matches($table,$this->dumpSettings['no-data'])){continue;}else {$this->listValues($table);}}} private function exportViews(){if(false===$this->dumpSettings['no-create-info']){foreach($this->views as $view){if($this->matches($view,$this->dumpSettings['exclude-tables'])){continue;}$this->tableColumnTypes[$view]=$this->getTableColumnTypes($view);$this->getViewStructureTable($view);}foreach($this->views as $view){if($this->matches($view,$this->dumpSettings['exclude-tables'])){continue;}$this->getViewStructureView($view);}}} private function exportTriggers(){foreach($this->triggers as $trigger){$this->getTriggerStructure($trigger);}} private function exportProcedures(){foreach($this->procedures as $procedure){$this->getProcedureStructure($procedure);}} private function exportEvents(){foreach($this->events as $event){$this->getEventStructure($event);}} private function getTableStructure($tableName){if(!$this->dumpSettings['no-create-info']){$ret='';if(!$this->dumpSettings['skip-comments']){$ret="--".PHP_EOL."-- Table structure for table `$tableName`".PHP_EOL."--".PHP_EOL.PHP_EOL;}$stmt=$this->typeAdapter->show_create_table($tableName);foreach($this->dbHandler->query($stmt) as $r){$this->compressManager->write($ret);if($this->dumpSettings['add-drop-table']){$this->compressManager->write($this->typeAdapter->drop_table($tableName));}$this->compressManager->write($this->typeAdapter->create_table($r));break;}}$this->tableColumnTypes[$tableName]=$this->getTableColumnTypes($tableName);return;} private function getTableColumnTypes($tableName){$columnTypes=array();$columns=$this->dbHandler->query($this->typeAdapter->show_columns($tableName));$columns->setFetchMode(PDO::FETCH_ASSOC);foreach($columns as $key=>$col){$types=$this->typeAdapter->parseColumnType($col);$columnTypes[$col['Field']]=array('is_numeric'=>$types['is_numeric'],'is_blob'=>$types['is_blob'],'type'=>$types['type'],'type_sql'=>$col['Type'],'is_virtual'=>$types['is_virtual']);}return $columnTypes;} private function getViewStructureTable($viewName){if(!$this->dumpSettings['skip-comments']){$ret="--".PHP_EOL."-- Stand-In structure for view `${viewName}`".PHP_EOL."--".PHP_EOL.PHP_EOL;$this->compressManager->write($ret);}$stmt=$this->typeAdapter->show_create_view($viewName);foreach($this->dbHandler->query($stmt) as $r){if($this->dumpSettings['add-drop-table']){$this->compressManager->write($this->typeAdapter->drop_view($viewName));}$this->compressManager->write($this->createStandInTable($viewName));break;}} public function createStandInTable($viewName){$ret=array();foreach($this->tableColumnTypes[$viewName] as $k=>$v){$ret[]="`${k}` ${v['type_sql']}";}$ret=implode(PHP_EOL.",",$ret);$ret="CREATE TABLE IF NOT EXISTS `$viewName` (".PHP_EOL.$ret.PHP_EOL.");".PHP_EOL;return $ret;} private function getViewStructureView($viewName){if(!$this->dumpSettings['skip-comments']){$ret="--".PHP_EOL."-- View structure for view `${viewName}`".PHP_EOL."--".PHP_EOL.PHP_EOL;$this->compressManager->write($ret);}$stmt=$this->typeAdapter->show_create_view($viewName);foreach($this->dbHandler->query($stmt) as $r){$this->compressManager->write($this->typeAdapter->drop_view($viewName));$this->compressManager->write($this->typeAdapter->create_view($r));break;}} private function getTriggerStructure($triggerName){$stmt=$this->typeAdapter->show_create_trigger($triggerName);foreach($this->dbHandler->query($stmt) as $r){if($this->dumpSettings['add-drop-trigger']){$this->compressManager->write($this->typeAdapter->add_drop_trigger($triggerName));}$this->compressManager->write($this->typeAdapter->create_trigger($r));return;}} private function getProcedureStructure($procedureName){if(!$this->dumpSettings['skip-comments']){$ret="--".PHP_EOL."-- Dumping routines for database '".$this->dbName."'".PHP_EOL."--".PHP_EOL.PHP_EOL;$this->compressManager->write($ret);}$stmt=$this->typeAdapter->show_create_procedure($procedureName);foreach($this->dbHandler->query($stmt) as $r){$this->compressManager->write($this->typeAdapter->create_procedure($r));return;}} private function getEventStructure($eventName){if(!$this->dumpSettings['skip-comments']){$ret="--".PHP_EOL."-- Dumping events for database '".$this->dbName."'".PHP_EOL."--".PHP_EOL.PHP_EOL;$this->compressManager->write($ret);}$stmt=$this->typeAdapter->show_create_event($eventName);foreach($this->dbHandler->query($stmt) as $r){$this->compressManager->write($this->typeAdapter->create_event($r));return;}} private function prepareColumnValues($tableName,$row){$ret=array();$columnTypes=$this->tableColumnTypes[$tableName];foreach($row as $colName=>$colValue){$colValue=$this->hookTransformColumnValue($tableName,$colName,$colValue,$row);$ret[]=$this->escape($colValue,$columnTypes[$colName]);}return $ret;} private function escape($colValue,$colType){if(is_null($colValue)){return "NULL";}elseif($this->dumpSettings['hex-blob']&&$colType['is_blob']){if($colType['type']=='bit'||!empty($colValue)){return "0x${colValue}";}else {return "''";}}elseif($colType['is_numeric']){return $colValue;}return $this->dbHandler->quote($colValue);} public function setTransformColumnValueHook($callable){$this->transformColumnValueCallable=$callable;} protected function hookTransformColumnValue($tableName,$colName,$colValue,$row){if(!$this->transformColumnValueCallable){return $colValue;}return call_user_func_array($this->transformColumnValueCallable,array($tableName,$colName,$colValue,$row));} private function listValues($tableName){$this->prepareListValues($tableName);$onlyOnce=true;$lineSize=0;$colStmt=$this->getColumnStmt($tableName);if($this->dumpSettings['complete-insert']){$colNames=$this->getColumnNames($tableName);}$stmt="SELECT ".implode(",",$colStmt)." FROM `$tableName`";if($this->dumpSettings['where']){$stmt.=" WHERE {$this->dumpSettings['where']}";}$resultSet=$this->dbHandler->query($stmt);$resultSet->setFetchMode(PDO::FETCH_ASSOC);$ignore=$this->dumpSettings['insert-ignore']?'  IGNORE':'';$count=0;foreach($resultSet as $row){$count++;$vals=$this->prepareColumnValues($tableName,$row);if($onlyOnce||!$this->dumpSettings['extended-insert']){if($this->dumpSettings['complete-insert']){$lineSize+=$this->compressManager->write("INSERT$ignore INTO `$tableName` (".implode(", ",$colNames).") VALUES (".implode(",",$vals).")");}else {$lineSize+=$this->compressManager->write("INSERT$ignore INTO `$tableName` VALUES (".implode(",",$vals).")");}$onlyOnce=false;}else {$lineSize+=$this->compressManager->write(",(".implode(",",$vals).")");}if(($lineSize>$this->dumpSettings['net_buffer_length'])||!$this->dumpSettings['extended-insert']){$onlyOnce=true;$lineSize=$this->compressManager->write(";".PHP_EOL);}}$resultSet->closeCursor();if(!$onlyOnce){$this->compressManager->write(";".PHP_EOL);}$this->endListValues($tableName,$count);} public function prepareListValues($tableName){if(!$this->dumpSettings['skip-comments']){$this->compressManager->write("--".PHP_EOL."-- Dumping data for table `$tableName`".PHP_EOL."--".PHP_EOL.PHP_EOL);}if($this->dumpSettings['single-transaction']){$this->dbHandler->exec($this->typeAdapter->setup_transaction());$this->dbHandler->exec($this->typeAdapter->start_transaction());}if($this->dumpSettings['lock-tables']){$this->typeAdapter->lock_table($tableName);}if($this->dumpSettings['add-locks']){$this->compressManager->write($this->typeAdapter->start_add_lock_table($tableName));}if($this->dumpSettings['disable-keys']){$this->compressManager->write($this->typeAdapter->start_add_disable_keys($tableName));}if($this->dumpSettings['no-autocommit']){$this->compressManager->write($this->typeAdapter->start_disable_autocommit());}return;} public function endListValues($tableName,$count=0){if($this->dumpSettings['disable-keys']){$this->compressManager->write($this->typeAdapter->end_add_disable_keys($tableName));}if($this->dumpSettings['add-locks']){$this->compressManager->write($this->typeAdapter->end_add_lock_table($tableName));}if($this->dumpSettings['single-transaction']){$this->dbHandler->exec($this->typeAdapter->commit_transaction());}if($this->dumpSettings['lock-tables']){$this->typeAdapter->unlock_table($tableName);}if($this->dumpSettings['no-autocommit']){$this->compressManager->write($this->typeAdapter->end_disable_autocommit());}$this->compressManager->write(PHP_EOL);if(!$this->dumpSettings['skip-comments']){$this->compressManager->write("-- Dumped table `$tableName` with $count row(s)".PHP_EOL."--".PHP_EOL.PHP_EOL);}return;} public function getColumnStmt($tableName){$colStmt=array();foreach($this->tableColumnTypes[$tableName] as $colName=>$colType){if($colType['type']=='bit'&&$this->dumpSettings['hex-blob']){$colStmt[]="LPAD(HEX(`${colName}`),2,'0') AS `${colName}`";}elseif($colType['is_blob']&&$this->dumpSettings['hex-blob']){$colStmt[]="HEX(`${colName}`) AS `${colName}`";}elseif($colType['is_virtual']){$this->dumpSettings['complete-insert']=true;continue;}else {$colStmt[]="`${colName}`";}}return $colStmt;} public function getColumnNames($tableName){$colNames=array();foreach($this->tableColumnTypes[$tableName] as $colName=>$colType){if($colType['is_virtual']){$this->dumpSettings['complete-insert']=true;continue;}else {$colNames[]="`${colName}`";}}return $colNames;}}abstract class CompressMethod{ public static $enums=array("None","Gzip","Bzip2"); public static function isValid($c){return in_array($c,self::$enums);}}abstract class CompressManagerFactory{ public static function create($c){$c=ucfirst(strtolower($c));if(!CompressMethod::isValid($c)){ throw new Exception("Compression method ($c) is not defined yet");}$method=__NAMESPACE__."\\"."Compress".$c;return new $method;}}class CompressBzip2 extends CompressManagerFactory{ private $fileHandler=null; public function __construct(){if(!function_exists("bzopen")){ throw new Exception("Compression is enabled, but bzip2 lib is not installed or configured properly");}} public function open($filename){$this->fileHandler=bzopen($filename,"w");if(false===$this->fileHandler){ throw new Exception("Output file is not writable");}return true;} public function write($str){if(false===($bytesWritten=bzwrite($this->fileHandler,$str))){ throw new Exception("Writting to file failed! Probably, there is no more free space left?");}return $bytesWritten;} public function close(){return bzclose($this->fileHandler);}}class CompressGzip extends CompressManagerFactory{ private $fileHandler=null; public function __construct(){if(!function_exists("gzopen")){ throw new Exception("Compression is enabled, but gzip lib is not installed or configured properly");}} public function open($filename){$this->fileHandler=gzopen($filename,"wb");if(false===$this->fileHandler){ throw new Exception("Output file is not writable");}return true;} public function write($str){if(false===($bytesWritten=gzwrite($this->fileHandler,$str))){ throw new Exception("Writting to file failed! Probably, there is no more free space left?");}return $bytesWritten;} public function close(){return gzclose($this->fileHandler);}}class CompressNone extends CompressManagerFactory{ private $fileHandler=null; public function open($filename){$this->fileHandler=fopen($filename,"wb");if(false===$this->fileHandler){ throw new Exception("Output file is not writable");}return true;} public function write($str){if(false===($bytesWritten=fwrite($this->fileHandler,$str))){ throw new Exception("Writting to file failed! Probably, there is no more free space left?");}return $bytesWritten;} public function close(){return fclose($this->fileHandler);}}abstract class TypeAdapter{ public static $enums=array("Sqlite","Mysql"); public static function isValid($c){return in_array($c,self::$enums);}}abstract class TypeAdapterFactory{ protected $dbHandler=null; protected $dumpSettings=array(); public static function create($c,$dbHandler=null,$dumpSettings=array()){$c=ucfirst(strtolower($c));if(!TypeAdapter::isValid($c)){ throw new Exception("Database type support for ($c) not yet available");}$method=__NAMESPACE__."\\"."TypeAdapter".$c;return new $method($dbHandler,$dumpSettings);} public function __construct($dbHandler=null,$dumpSettings=array()){$this->dbHandler=$dbHandler;$this->dumpSettings=$dumpSettings;} public function databases(){return "";} public function show_create_table($tableName){return "SELECT tbl_name as 'Table', sql as 'Create Table' "."FROM sqlite_master "."WHERE type='table' AND tbl_name='$tableName'";} public function create_table($row){return "";} public function show_create_view($viewName){return "SELECT tbl_name as 'View', sql as 'Create View' "."FROM sqlite_master "."WHERE type='view' AND tbl_name='$viewName'";} public function create_view($row){return "";} public function show_create_trigger($triggerName){return "";} public function create_trigger($triggerName){return "";} public function create_procedure($procedureName){return "";} public function show_tables(){return "SELECT tbl_name FROM sqlite_master WHERE type='table'";} public function show_views(){return "SELECT tbl_name FROM sqlite_master WHERE type='view'";} public function show_triggers(){return "SELECT name FROM sqlite_master WHERE type='trigger'";} public function show_columns(){if(func_num_args()!=1){return "";}$args=func_get_args();return "pragma table_info(${args[0]})";} public function show_procedures(){return "";} public function show_events(){return "";} public function setup_transaction(){return "";} public function start_transaction(){return "BEGIN EXCLUSIVE";} public function commit_transaction(){return "COMMIT";} public function lock_table(){return "";} public function unlock_table(){return "";} public function start_add_lock_table(){return PHP_EOL;} public function end_add_lock_table(){return PHP_EOL;} public function start_add_disable_keys(){return PHP_EOL;} public function end_add_disable_keys(){return PHP_EOL;} public function start_disable_foreign_keys_check(){return PHP_EOL;} public function end_disable_foreign_keys_check(){return PHP_EOL;} public function add_drop_database(){return PHP_EOL;} public function add_drop_trigger(){return PHP_EOL;} public function drop_table(){return PHP_EOL;} public function drop_view(){return PHP_EOL;} public function parseColumnType($colType){return array();} public function backup_parameters(){return PHP_EOL;} public function restore_parameters(){return PHP_EOL;}}class TypeAdapterPgsql extends TypeAdapterFactory{}class TypeAdapterDblib extends TypeAdapterFactory{}class TypeAdapterSqlite extends TypeAdapterFactory{}class TypeAdapterMysql extends TypeAdapterFactory{const DEFINER_RE='DEFINER=`(?:[^`]|``)*`@`(?:[^`]|``)*`'; public $mysqlTypes=array('numerical'=>array('bit','tinyint','smallint','mediumint','int','integer','bigint','real','double','float','decimal','numeric'),'blob'=>array('tinyblob','blob','mediumblob','longblob','binary','varbinary','bit','geometry','point','linestring','polygon','multipoint','multilinestring','multipolygon','geometrycollection',)); public function databases(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();$databaseName=$args[0];$resultSet=$this->dbHandler->query("SHOW VARIABLES LIKE 'character_set_database';");$characterSet=$resultSet->fetchColumn(1);$resultSet->closeCursor();$resultSet=$this->dbHandler->query("SHOW VARIABLES LIKE 'collation_database';");$collationDb=$resultSet->fetchColumn(1);$resultSet->closeCursor();$ret="";$ret.="CREATE DATABASE /*!32312 IF NOT EXISTS*/ `${databaseName}`"." /*!40100 DEFAULT CHARACTER SET ${characterSet} "." COLLATE ${collationDb} */;".PHP_EOL.PHP_EOL."USE `${databaseName}`;".PHP_EOL.PHP_EOL;return $ret;} public function show_create_table($tableName){return "SHOW CREATE TABLE `$tableName`";} public function show_create_view($viewName){return "SHOW CREATE VIEW `$viewName`";} public function show_create_trigger($triggerName){return "SHOW CREATE TRIGGER `$triggerName`";} public function show_create_procedure($procedureName){return "SHOW CREATE PROCEDURE `$procedureName`";} public function show_create_event($eventName){return "SHOW CREATE EVENT `$eventName`";} public function create_table($row){if(!isset($row['Create Table'])){ throw new Exception("Error getting table code, unknown output");}$createTable=$row['Create Table'];if($this->dumpSettings['reset-auto-increment']){$match="/AUTO_INCREMENT=[0-9]+/s";$replace="";$createTable=preg_replace($match,$replace,$createTable);}$ret="/*!40101 SET @saved_cs_client     = @@character_set_client */;".PHP_EOL."/*!40101 SET character_set_client = ".$this->dumpSettings['default-character-set']." */;".PHP_EOL.$createTable.";".PHP_EOL."/*!40101 SET character_set_client = @saved_cs_client */;".PHP_EOL.PHP_EOL;return $ret;} public function create_view($row){$ret="";if(!isset($row['Create View'])){ throw new Exception("Error getting view structure, unknown output");}$viewStmt=$row['Create View'];$definerStr=$this->dumpSettings['skip-definer']?'':'/*!50013 \2 */'.PHP_EOL;if($viewStmtReplaced=preg_replace('/^(CREATE(?:\s+ALGORITHM=(?:UNDEFINED|MERGE|TEMPTABLE))?)\s+('.self::DEFINER_RE.'(?:\s+SQL SECURITY DEFINER|INVOKER)?)?\s+(VIEW .+)$/','/*!50001 \1 */'.PHP_EOL.$definerStr.'/*!50001 \3 */',$viewStmt,1)){$viewStmt=$viewStmtReplaced;};$ret.=$viewStmt.';'.PHP_EOL.PHP_EOL;return $ret;} public function create_trigger($row){$ret="";if(!isset($row['SQL Original Statement'])){ throw new Exception("Error getting trigger code, unknown output");}$triggerStmt=$row['SQL Original Statement'];$definerStr=$this->dumpSettings['skip-definer']?'':'/*!50017 \2*/ ';if($triggerStmtReplaced=preg_replace('/^(CREATE)\s+('.self::DEFINER_RE.')?\s+(TRIGGER\s.*)$/s','/*!50003 \1*/ '.$definerStr.'/*!50003 \3 */',$triggerStmt,1)){$triggerStmt=$triggerStmtReplaced;}$ret.="DELIMITER ;;".PHP_EOL.$triggerStmt.";;".PHP_EOL."DELIMITER ;".PHP_EOL.PHP_EOL;return $ret;} public function create_procedure($row){$ret="";if(!isset($row['Create Procedure'])){ throw new Exception("Error getting procedure code, unknown output. "."Please check 'https://bugs.mysql.com/bug.php?id=14564'");}$procedureStmt=$row['Create Procedure'];$ret.="/*!50003 DROP PROCEDURE IF EXISTS `".$row['Procedure']."` */;".PHP_EOL."/*!40101 SET @saved_cs_client     = @@character_set_client */;".PHP_EOL."/*!40101 SET character_set_client = ".$this->dumpSettings['default-character-set']." */;".PHP_EOL."DELIMITER ;;".PHP_EOL.$procedureStmt." ;;".PHP_EOL."DELIMITER ;".PHP_EOL."/*!40101 SET character_set_client = @saved_cs_client */;".PHP_EOL.PHP_EOL;return $ret;} public function create_event($row){$ret="";if(!isset($row['Create Event'])){ throw new Exception("Error getting event code, unknown output. "."Please check 'http://stackoverflow.com/questions/10853826/mysql-5-5-create-event-gives-syntax-error'");}$eventName=$row['Event'];$eventStmt=$row['Create Event'];$sqlMode=$row['sql_mode'];$definerStr=$this->dumpSettings['skip-definer']?'':'/*!50117 \2*/ ';if($eventStmtReplaced=preg_replace('/^(CREATE)\s+('.self::DEFINER_RE.')?\s+(EVENT .*)$/','/*!50106 \1*/ '.$definerStr.'/*!50106 \3 */',$eventStmt,1)){$eventStmt=$eventStmtReplaced;}$ret.="/*!50106 SET @save_time_zone= @@TIME_ZONE */ ;".PHP_EOL."/*!50106 DROP EVENT IF EXISTS `".$eventName."` */;".PHP_EOL."DELIMITER ;;".PHP_EOL."/*!50003 SET @saved_cs_client      = @@character_set_client */ ;;".PHP_EOL."/*!50003 SET @saved_cs_results     = @@character_set_results */ ;;".PHP_EOL."/*!50003 SET @saved_col_connection = @@collation_connection */ ;;".PHP_EOL."/*!50003 SET character_set_client  = utf8 */ ;;".PHP_EOL."/*!50003 SET character_set_results = utf8 */ ;;".PHP_EOL."/*!50003 SET collation_connection  = utf8_general_ci */ ;;".PHP_EOL."/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;;".PHP_EOL."/*!50003 SET sql_mode              = '".$sqlMode."' */ ;;".PHP_EOL."/*!50003 SET @saved_time_zone      = @@time_zone */ ;;".PHP_EOL."/*!50003 SET time_zone             = 'SYSTEM' */ ;;".PHP_EOL.$eventStmt." ;;".PHP_EOL."/*!50003 SET time_zone             = @saved_time_zone */ ;;".PHP_EOL."/*!50003 SET sql_mode              = @saved_sql_mode */ ;;".PHP_EOL."/*!50003 SET character_set_client  = @saved_cs_client */ ;;".PHP_EOL."/*!50003 SET character_set_results = @saved_cs_results */ ;;".PHP_EOL."/*!50003 SET collation_connection  = @saved_col_connection */ ;;".PHP_EOL."DELIMITER ;".PHP_EOL."/*!50106 SET TIME_ZONE= @save_time_zone */ ;".PHP_EOL.PHP_EOL;return $ret;} public function show_tables(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "SELECT TABLE_NAME AS tbl_name "."FROM INFORMATION_SCHEMA.TABLES "."WHERE TABLE_TYPE='BASE TABLE' AND TABLE_SCHEMA='${args[0]}'";} public function show_views(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "SELECT TABLE_NAME AS tbl_name "."FROM INFORMATION_SCHEMA.TABLES "."WHERE TABLE_TYPE='VIEW' AND TABLE_SCHEMA='${args[0]}'";} public function show_triggers(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "SHOW TRIGGERS FROM `${args[0]}`;";} public function show_columns(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "SHOW COLUMNS FROM `${args[0]}`;";} public function show_procedures(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "SELECT SPECIFIC_NAME AS procedure_name "."FROM INFORMATION_SCHEMA.ROUTINES "."WHERE ROUTINE_TYPE='PROCEDURE' AND ROUTINE_SCHEMA='${args[0]}'";} public function show_events(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "SELECT EVENT_NAME AS event_name "."FROM INFORMATION_SCHEMA.EVENTS "."WHERE EVENT_SCHEMA='${args[0]}'";} public function setup_transaction(){return "SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ";} public function start_transaction(){return "START TRANSACTION";} public function commit_transaction(){return "COMMIT";} public function lock_table(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return $this->dbHandler->exec("LOCK TABLES `${args[0]}` READ LOCAL");} public function unlock_table(){return $this->dbHandler->exec("UNLOCK TABLES");} public function start_add_lock_table(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "LOCK TABLES `${args[0]}` WRITE;".PHP_EOL;} public function end_add_lock_table(){return "UNLOCK TABLES;".PHP_EOL;} public function start_add_disable_keys(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "/*!40000 ALTER TABLE `${args[0]}` DISABLE KEYS */;".PHP_EOL;} public function end_add_disable_keys(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "/*!40000 ALTER TABLE `${args[0]}` ENABLE KEYS */;".PHP_EOL;} public function start_disable_autocommit(){return "SET autocommit=0;".PHP_EOL;} public function end_disable_autocommit(){return "COMMIT;".PHP_EOL;} public function add_drop_database(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "/*!40000 DROP DATABASE IF EXISTS `${args[0]}`*/;".PHP_EOL.PHP_EOL;} public function add_drop_trigger(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "DROP TRIGGER IF EXISTS `${args[0]}`;".PHP_EOL;} public function drop_table(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "DROP TABLE IF EXISTS `${args[0]}`;".PHP_EOL;} public function drop_view(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "DROP TABLE IF EXISTS `${args[0]}`;".PHP_EOL."/*!50001 DROP VIEW IF EXISTS `${args[0]}`*/;".PHP_EOL;} public function getDatabaseHeader(){$this->check_parameters(func_num_args(),$expected_num_args=1,__METHOD__);$args=func_get_args();return "--".PHP_EOL."-- Current Database: `${args[0]}`".PHP_EOL."--".PHP_EOL.PHP_EOL;} public function parseColumnType($colType){$colInfo=array();$colParts=explode(" ",$colType['Type']);if($fparen=strpos($colParts[0],"(")){$colInfo['type']=substr($colParts[0],0,$fparen);$colInfo['length']=str_replace(")","",substr($colParts[0],$fparen+1));$colInfo['attributes']=isset($colParts[1])?$colParts[1]:null;}else {$colInfo['type']=$colParts[0];}$colInfo['is_numeric']=in_array($colInfo['type'],$this->mysqlTypes['numerical']);$colInfo['is_blob']=in_array($colInfo['type'],$this->mysqlTypes['blob']);$colInfo['is_virtual']=strpos($colType['Extra'],"VIRTUAL GENERATED")!==false||strpos($colType['Extra'],"STORED GENERATED")!==false;return $colInfo;} public function backup_parameters(){$ret="/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;".PHP_EOL."/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;".PHP_EOL."/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;".PHP_EOL."/*!40101 SET NAMES ".$this->dumpSettings['default-character-set']." */;".PHP_EOL;if(false===$this->dumpSettings['skip-tz-utc']){$ret.="/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;".PHP_EOL."/*!40103 SET TIME_ZONE='+00:00' */;".PHP_EOL;}$ret.="/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;".PHP_EOL."/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;".PHP_EOL."/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;".PHP_EOL."/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;".PHP_EOL.PHP_EOL;return $ret;} public function restore_parameters(){$ret="";if(false===$this->dumpSettings['skip-tz-utc']){$ret.="/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;".PHP_EOL;}$ret.="/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;".PHP_EOL."/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;".PHP_EOL."/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;".PHP_EOL."/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;".PHP_EOL."/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;".PHP_EOL."/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;".PHP_EOL."/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;".PHP_EOL.PHP_EOL;return $ret;} private function check_parameters($num_args,$expected_num_args,$method_name){if($num_args!=$expected_num_args){ throw new Exception("Unexpected parameter passed to $method_name");}return;}}

set_time_limit(0);

define('DEBUG', true);
define('SPLACE_SECRET_HASH', <Splace Secret Hash Placeholder>);

// $input is an object holding the request parameters.
$input = json_decode(file_get_contents('php://input'));

if(openssl_digest($input->Secret, 'sha512') !== SPLACE_SECRET_HASH) {
    http_response_code(401);
    echo json_encode("incorrect secret");
    exit;
}

// $cfg is the database connection parameters.
$cfg = $input->Config;
$data_source_name = "mysql:host={$cfg->Addr};dbname={$cfg->Database};charset=utf8mb4";

// connect creates a PDO connection with the details given in the request.
function connect() {
    global $cfg, $data_source_name;
    $options = [
        PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_NUM,
        PDO::ATTR_EMULATE_PREPARES   => false,
        PDO::ATTR_PERSISTENT         => true
    ];
    return new PDO($data_source_name, $cfg->User, $cfg->Pwd, $options);
}

// reply sends a JSON encoded message, and is mainly used
// to stream rows as they come back from a query.
function reply($msg, $data) {
    echo json_encode($msg);
    if($data !== null) {
        echo json_encode($data, JSON_UNESCAPED_UNICODE);
    }
}

function parse_wp_config($filename) {
    $fh = @fopen($filename, 'r');
    if (!$fh) {
        return [
            'Error' => 'Could not open file.'
        ];
    }
    while (!feof($fh)) {
        $line = fgets($fh);
        if(preg_match('/define.*(DB_USER|DB_HOST|DB_PASSWORD|DB_NAME)/', $line)) {
            $conf[] = $line;
        }
    }
    fclose($fh);
    if(@count($conf) < 3) {
        return [
            'Error' => 'Could not find constants DB_HOST, DB_USER, DB_PASSWORD, DB_NAME.'
        ];
    }
    eval(implode($conf));
    return $config = [
        'Engine' => 'mysql',
        'Addr' => DB_HOST,
        'User' => DB_USER,
        'Pwd' => DB_PASSWORD,
        'Database' => DB_NAME
    ];
}

switch($input->Cmd) {
    // Acknowledges access and returns discovered database configurations from
    // systems like WordPress.
    case 'handshake':
        $configs = [];
        if(file_exists('./wp-config.php')) {
            $configs[] = [
                'Who' => 'WordPress',
                'Where' => realpath('./wp-config.php'),
                'Config' => parse_wp_config('./wp-config.php')
            ];
        }
        echo json_encode([
            'DiscoveredConfigs' => $configs
        ], JSON_UNESCAPED_UNICODE);
        break;

    // Executes a query and returns the number of affected rows.
    case 'exec':
        try {
            $pdo = connect();

            $args = $input->Args;
            if(empty($args)) {
                $args = null;
            }
            $stmt = $pdo->prepare($input->Query);
            $stmt->execute($args);

            echo json_encode($stmt->rowCount());
        } catch(Exception $e) {
            http_response_code(500);
            echo json_encode($e->getMessage());
        }
        break;

    // Executes a query and streams the rows.
    case 'query':
        try {
            $pdo = connect();

            if(empty($input->Args)) {
                $stmt = $pdo->query($input->Query);
            } else {
                $stmt = $pdo->prepare($input->Query);
                $stmt->execute($input->Args);
            }

            // Send columns.
            $columns = [];
            for($i = 0; $i < $stmt->columnCount(); $i++) {
                $columns[] = $stmt->getColumnMeta($i)['name'];
            }
            echo json_encode($columns);
        } catch (Exception $e) {
            http_response_code(500);
            echo json_encode($e->getMessage());
            return;
        }
        
        // Send rows.
        try {
            while($row = $stmt->fetch()) {
                for($i = 0; $i < count($row); $i++) {
                    $row[$i] = strval($row[$i]);
                }
                reply('R', $row);
            }
        } catch (Exception $e) {
            reply('E', $e->getMessage());
        }

        reply('D', null);
        break;

    // Dumps database directly to php://output
    case 'dump':
        try {
            $dump = new Mysqldump(
                $data_source_name,
                $cfg->User,
                $cfg->Pwd,
                [],
                [
                    PDO::ATTR_PERSISTENT => false,
                    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_BOTH,
                ]
            );
            $dump->start('php://output');
        } catch (Exception $e) {
            http_response_code(500);
            echo json_encode($e->getMessage());
        }
        break;
}